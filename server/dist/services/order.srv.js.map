{"version":3,"sources":["../../src/services/order.srv.js"],"names":["db","require","module","exports","findAll","success","error","query","connection","err","rows","console","findAllNotFinish","findNotFinishForAlloId","alloId","removeOrder","id","addOrder","order","name","address","quantity","specification","Date","updateInProgress","state"],"mappings":"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","file":"order.srv.js","sourcesContent":["let db = require('../db.js');\n\nmodule.exports.findAll = (success, error) => {\n\n    let query = 'SELECT alloOrder.*, allo.name FROM alloOrder INNER JOIN allo ON alloOrder.alloId = allo.id ORDER BY created_at';\n\n    db.connection.query(query, (err, rows) => {\n\n        if (!err) {\n            success(rows);\n\n        } else {\n            console.error(err);\n            error(err);\n        }\n    });\n};\n\nmodule.exports.findAllNotFinish = (success, error) => {\n\n    let query = 'SELECT alloOrder.*, allo.name FROM alloOrder INNER JOIN allo ON alloOrder.alloId = allo.id WHERE finish = 0 ORDER BY created_at';\n\n    db.connection.query(query, (err, rows) => {\n\n        if (!err) {\n            success(rows);\n\n        } else {\n            console.error(err);\n            error(err);\n        }\n    });\n};\n\nmodule.exports.findNotFinishForAlloId = (alloId, success, error) => {\n\n    let query = 'SELECT * FROM alloOrder WHERE finish = 0 AND alloId = ? ORDER BY created_at';\n\n    db.connection.query(query, [alloId], (err, rows) => {\n\n        if (!err) {\n            success(rows);\n\n        } else {\n            console.error(err);\n            error(err);\n        }\n    });\n};\n\nmodule.exports.removeOrder = (id, success, error) => {\n\n    let query = 'UPDATE alloOrder SET finish = 1 WHERE id = ?';\n\n    db.connection.query(query, [id], (err, rows) => {\n\n        if (!err) {\n            success(rows);\n\n        } else {\n            console.error(err);\n            error(err);\n        }\n    });\n};\n\nmodule.exports.addOrder = (order, success, error) => {\n\n    let query = 'INSERT INTO alloOrder (studentName, addresse, alloId, quantity, specification, created_at) VALUES(?,?,?,?,?,?)';\n\n    db.connection.query(query, [order.name, order.address, order.alloId, order.quantity, order.specification, new Date()], (err, rows) => {\n\n        if (!err) {\n            success(rows);\n\n        } else {\n            console.error(err);\n            error(err);\n        }\n    });\n};\n\nmodule.exports.updateInProgress = (id,state, success, error) => {\n\n    let query = 'UPDATE alloOrder SET inProgress = ? WHERE id = ?';\n\n    db.connection.query(query, [state,id], (err, rows) => {\n\n        if (!err) {\n            success(rows);\n\n        } else {\n            console.error(err);\n            error(err);\n        }\n    });\n};\n\n/*module.exports.findById = (id, success, error) => {\n\n    let query = 'SELECT * FROM product WHERE id = ? ORDER BY price';\n\n    db.connection.query(query, [id], (err, rows) => {\n\n        if (!err) {\n            success(rows[0]);\n\n        } else {\n            console.error(err);\n            error(err);\n        }\n    });\n};*/\n\n"]}