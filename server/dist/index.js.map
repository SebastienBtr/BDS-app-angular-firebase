{"version":3,"sources":["../src/index.js"],"names":["app","require","conf","dbParams","get","db","mysql","bodyParser","ordersController","allosController","specificationController","use","req","res","next","setHeader","urlencoded","extended","limit","json","dbConnection","objConn","createConnection","host","user","password","database","connect","err","console","error","code","setTimeout","timeoutBeforeReconnection","info","connection","on","port","listen","log"],"mappings":";;AAAA,IAAIA,MAAMC,QAAQ,SAAR,GAAV;AACA,IAAIC,OAAOD,QAAQ,aAAR,CAAX;AACA,IAAIE,WAAWD,KAAKE,GAAL,CAAS,IAAT,CAAf;AACA,IAAIC,KAAKJ,QAAQ,SAAR,CAAT;AACA,IAAIK,QAAQL,QAAQ,OAAR,CAAZ;AACA,IAAIM,aAAaN,QAAQ,aAAR,CAAjB;;AAEA,IAAIO,mBAAmBP,QAAQ,6BAAR,CAAvB;AACA,IAAIQ,kBAAkBR,QAAQ,yBAAR,CAAtB;AACA,IAAIS,0BAA0BT,QAAQ,qCAAR,CAA9B;;AAGA;AACAD,IAAIW,GAAJ,CAAS,UAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;;AAEzB;AACAD,QAAIE,SAAJ,CAAc,6BAAd,EAA6C,GAA7C;;AAEA;AACAF,QAAIE,SAAJ,CAAc,8BAAd,EAA8C,wCAA9C;;AAEA;AACAF,QAAIE,SAAJ,CAAc,8BAAd,EAA8C,+BAA9C;;AAEA;AACA;AACAF,QAAIE,SAAJ,CAAc,kCAAd,EAAkD,KAAlD;;AAEA;AACAD;AACH,CAjBD;;AAmBA;AACA;AACAd,IAAIW,GAAJ,CAAQJ,WAAWS,UAAX,CAAsB,EAAEC,UAAU,IAAZ,EAAkBC,OAAO,OAAzB,EAAtB,CAAR;AACAlB,IAAIW,GAAJ,CAAQJ,WAAWY,IAAX,EAAR;;AAEA;AACAnB,IAAIW,GAAJ,CAAQ,MAAR,EAAgB,CAACH,gBAAD,EAAmBC,eAAnB,EAAoCC,uBAApC,CAAhB;;AAEA,SAASU,YAAT,GAAwB;;AAEpB,QAAIC,UAAUf,MAAMgB,gBAAN,CAAuB;AACjCC,cAAMpB,SAASoB,IADkB;AAEjCC,cAAMrB,SAASqB,IAFkB;AAGjCC,kBAAUtB,SAASsB,QAHc;AAIjCC,kBAAUvB,SAASuB;AAJc,KAAvB,CAAd;;AAOAL,YAAQM,OAAR,CAAiB,UAACC,GAAD,EAAS;;AAEtB,YAAIA,GAAJ,EAAS;AACLC,oBAAQC,KAAR,CAAc,8BAAd,EAA8CF,IAAIG,IAAlD;AACAC,uBAAWZ,YAAX,EAAyBjB,SAAS8B,yBAAlC,EAFK,CAEyD;AAEjE,SAJD,MAIO;AACHJ,oBAAQK,IAAR,CAAa,mBAAb;AACA7B,eAAG8B,UAAH,GAAgBd,OAAhB;AACH;AACJ,KAVD;;AAYAA,YAAQe,EAAR,CAAW,OAAX,EAAoB,UAACR,GAAD,EAAS;AACzB,YAAIA,IAAIG,IAAJ,KAAa,0BAAjB,EAA6C;AAAE;AAC3CX;AACH,SAFD,MAEO;AACH,kBAAMQ,GAAN;AACH;AACJ,KAND;AAOH;;AAEDR;;AAEA,IAAIiB,OAAOnC,KAAKE,GAAL,CAAS,QAAT,EAAmBiC,IAA9B;;AAEArC,IAAIsC,MAAJ,CAAWD,IAAX,EAAiB,YAAM;AACnBR,YAAQU,GAAR,CAAY,2BAA2BF,IAAvC;AACH,CAFD","file":"index.js","sourcesContent":["let app = require('express')();\nlet conf = require('./config.js');\nlet dbParams = conf.get('db');\nlet db = require('./db.js');\nlet mysql = require('mysql');\nlet bodyParser = require('body-parser');\n\nlet ordersController = require('./controllers/order.ctrl.js');\nlet allosController = require('./controllers/allo.ctrl');\nlet specificationController = require('./controllers/specification.ctrl.js');\n\n\n// Add headers\napp.use( (req, res, next) => {\n\n    // Website you wish to allow to connect\n    res.setHeader('Access-Control-Allow-Origin', '*');\n\n    // Request methods you wish to allow\n    res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS, PUT, PATCH, DELETE');\n\n    // Request headers you wish to allow\n    res.setHeader('Access-Control-Allow-Headers', 'X-Requested-With,content-type');\n\n    // Set to true if you need the website to include cookies in the requests sent\n    // to the API (e.g. in case you use sessions)\n    res.setHeader('Access-Control-Allow-Credentials', false);\n\n    // Pass to next layer of middleware\n    next();\n});\n\n// configure app to use bodyParser()\n// this will let us get the data from a POST\napp.use(bodyParser.urlencoded({ extended: true, limit: '100mb' }));\napp.use(bodyParser.json());\n\n// all of our routes will be prefixed with /api\napp.use('/api', [ordersController, allosController, specificationController]);\n\nfunction dbConnection() {\n\n    let objConn = mysql.createConnection({\n        host: dbParams.host,\n        user: dbParams.user,\n        password: dbParams.password,\n        database: dbParams.database\n    });\n\n    objConn.connect( (err) => {\n\n        if (err) {\n            console.error('error when connecting to db:', err.code);\n            setTimeout(dbConnection, dbParams.timeoutBeforeReconnection); // We introduce a delay before attempting to reconnect\n\n        } else {\n            console.info('Connected to db !');\n            db.connection = objConn;\n        }\n    });\n\n    objConn.on('error', (err) => {\n        if (err.code === 'PROTOCOL_CONNECTION_LOST') { // Connection to the MySQL server is usually lost\n            dbConnection();\n        } else {\n            throw err;\n        }\n    });\n}\n\ndbConnection();\n\nlet port = conf.get('server').port;\n\napp.listen(port, () => {\n    console.log('app listening on port ' + port);\n});"]}