{"version":3,"sources":["../src/index.js"],"names":["app","require","conf","dbParams","get","db","mysql","productController","use","dbConnection","objConn","createConnection","host","user","password","database","connect","err","console","error","code","setTimeout","timeoutBeforeReconnection","info","connection","on","port","listen","log"],"mappings":";;AAAA,IAAIA,MAAMC,QAAQ,SAAR,GAAV;AACA,IAAIC,OAAOD,QAAQ,aAAR,CAAX;AACA,IAAIE,WAAWD,KAAKE,GAAL,CAAS,IAAT,CAAf;AACA,IAAIC,KAAKJ,QAAQ,SAAR,CAAT;AACA,IAAIK,QAAQL,QAAQ,OAAR,CAAZ;;AAEA,IAAIM,oBAAoBN,QAAQ,+BAAR,CAAxB;;AAEA;AACAD,IAAIQ,GAAJ,CAAQ,MAAR,EAAgB,CAACD,iBAAD,CAAhB;;AAGA,SAASE,YAAT,GAAwB;;AAEpB,QAAIC,UAAUJ,MAAMK,gBAAN,CAAuB;AACjCC,cAAMT,SAASS,IADkB;AAEjCC,cAAMV,SAASU,IAFkB;AAGjCC,kBAAUX,SAASW,QAHc;AAIjCC,kBAAUZ,SAASY;AAJc,KAAvB,CAAd;;AAOAL,YAAQM,OAAR,CAAiB,UAACC,GAAD,EAAS;;AAEtB,YAAIA,GAAJ,EAAS;AACLC,oBAAQC,KAAR,CAAc,8BAAd,EAA8CF,IAAIG,IAAlD;AACAC,uBAAWZ,YAAX,EAAyBN,SAASmB,yBAAlC,EAFK,CAEyD;AAEjE,SAJD,MAIO;AACHJ,oBAAQK,IAAR,CAAa,mBAAb;AACAlB,eAAGmB,UAAH,GAAgBd,OAAhB;AACH;AACJ,KAVD;;AAYAA,YAAQe,EAAR,CAAW,OAAX,EAAoB,UAACR,GAAD,EAAS;AACzB,YAAIA,IAAIG,IAAJ,KAAa,0BAAjB,EAA6C;AAAE;AAC3CX;AACH,SAFD,MAEO;AACH,kBAAMQ,GAAN;AACH;AACJ,KAND;AAOH;;AAEDR;;AAEA,IAAIiB,OAAOxB,KAAKE,GAAL,CAAS,QAAT,EAAmBsB,IAA9B;;AAEA1B,IAAI2B,MAAJ,CAAWD,IAAX,EAAiB,YAAM;AACnBR,YAAQU,GAAR,CAAY,2BAA2BF,IAAvC;AACH,CAFD","file":"index.js","sourcesContent":["let app = require('express')();\nlet conf = require('./config.js');\nlet dbParams = conf.get('db');\nlet db = require('./db.js');\nlet mysql = require('mysql');\n\nlet productController = require('./controllers/product.ctrl.js');\n\n// all of our routes will be prefixed with /api\napp.use('/api', [productController]);\n\n\nfunction dbConnection() {\n\n    let objConn = mysql.createConnection({\n        host: dbParams.host,\n        user: dbParams.user,\n        password: dbParams.password,\n        database: dbParams.database\n    });\n\n    objConn.connect( (err) => {\n\n        if (err) {\n            console.error('error when connecting to db:', err.code);\n            setTimeout(dbConnection, dbParams.timeoutBeforeReconnection); // We introduce a delay before attempting to reconnect\n\n        } else {\n            console.info('Connected to db !');\n            db.connection = objConn;\n        }\n    });\n\n    objConn.on('error', (err) => {\n        if (err.code === 'PROTOCOL_CONNECTION_LOST') { // Connection to the MySQL server is usually lost\n            dbConnection();\n        } else {\n            throw err;\n        }\n    });\n}\n\ndbConnection();\n\nlet port = conf.get('server').port;\n\napp.listen(port, () => {\n    console.log('app listening on port ' + port);\n});"]}